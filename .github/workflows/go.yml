name: Go Build and Test

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'

    - name: Generate Error Codes
      run: go generate ./...

    - name: Build
      run: go build -v .

    - name: Go Vulnerability Scan
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...

    - name: Test
      run: go test -v ./...

  test-install:
    name: Test Install Script
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
    - uses: actions/checkout@v4
    
    - name: Test Install Script (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        chmod +x ./install.sh
        # Test with default options (latest version)
        ./install.sh -d /tmp/agentuity-test
        # Verify installation
        /tmp/agentuity-test/agentuity --version
        
        # Test with specific version if available - simplified to avoid potential issues
        LATEST_VERSION=$(/tmp/agentuity-test/agentuity --version)
        if [ -n "$LATEST_VERSION" ]; then
          echo "Testing installation with specific version: $LATEST_VERSION"
          ./install.sh -d /tmp/agentuity-test-version -v $LATEST_VERSION
          # Verify installation with specific version
          INSTALLED_VERSION=$(/tmp/agentuity-test-version/agentuity --version)
          echo "Installed version: $INSTALLED_VERSION"
          echo "Expected version: $LATEST_VERSION"
          if [ "$INSTALLED_VERSION" = "$LATEST_VERSION" ]; then
            echo "Version verification successful"
          else
            echo "Version verification failed"
            exit 1
          fi
        fi
      shell: bash
      
    - name: Test Install Script (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Make script executable
        bash -c "chmod +x ./install.sh"
        
        # Create test directory
        $testDir = "$env:TEMP/agentuity-test"
        New-Item -ItemType Directory -Force -Path $testDir | Out-Null
        
        # Create a mock executable for testing
        Write-Host "Creating mock executable for testing..."
        $mockScript = @"
@echo off
echo 0.0.74
"@
        Set-Content -Path "$testDir/agentuity.exe.bat" -Value $mockScript
        New-Item -ItemType File -Force -Path "$testDir/agentuity.exe" | Out-Null
        
        # Test with default options (latest version)
        Write-Host "Testing install script with default options..."
        bash -c "NONINTERACTIVE=true ./install.sh -d '$env:TEMP/agentuity-test-download'"
        
        # Verify MSI was downloaded
        if (Test-Path "$env:USERPROFILE/agentuity-x64.msi") {
          Write-Host "MSI download verification successful"
          
          # Test with specific version
          Write-Host "Testing install script with specific version..."
          bash -c "NONINTERACTIVE=true ./install.sh -d '$env:TEMP/agentuity-test-version-download' -v 0.0.74"
          
          # Verify version-specific MSI was downloaded
          if (Test-Path "$env:USERPROFILE/agentuity-x64.msi") {
            Write-Host "Version-specific MSI download verification successful"
          } else {
            Write-Host "Version-specific MSI download verification failed"
            exit 1
          }
        } else {
          Write-Host "MSI download verification failed"
          exit 1
        }
      shell: pwsh                  