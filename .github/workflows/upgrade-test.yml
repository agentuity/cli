name: Upgrade Path Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test-upgrade:
    name: Test CLI Upgrade Path
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache: true
      
      - name: Build current version
        run: |
          go build -o agentuity-current
      
      # Simulate having an older version installed
      - name: Download previous release
        shell: bash
        run: |
          # Get the latest release tag
          LATEST_TAG=$(curl -s https://api.github.com/repos/agentuity/cli/releases/latest | grep "tag_name" | cut -d '"' -f 4)
          
          # Get the second latest release if available, otherwise use the latest
          RELEASES=$(curl -s https://api.github.com/repos/agentuity/cli/releases | grep "tag_name" | cut -d '"' -f 4)
          PREVIOUS_TAG=$(echo "$RELEASES" | sed -n '2p')
          
          if [ -z "$PREVIOUS_TAG" ]; then
            PREVIOUS_TAG=$LATEST_TAG
          fi
          
          echo "Using previous version: $PREVIOUS_TAG"
          
          # Download the previous release based on OS
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            ASSET_NAME="agentuity_Windows_x86_64.zip"
            curl -L "https://github.com/agentuity/cli/releases/download/${PREVIOUS_TAG}/${ASSET_NAME}" -o previous.zip
            unzip previous.zip
            mv agentuity.exe agentuity-previous.exe
          elif [ "${{ matrix.os }}" == "macos-latest" ]; then
            ASSET_NAME="agentuity_Darwin_x86_64.tar.gz"
            curl -L "https://github.com/agentuity/cli/releases/download/${PREVIOUS_TAG}/${ASSET_NAME}" -o previous.tar.gz
            tar -xzf previous.tar.gz
            mv agentuity agentuity-previous
          else
            ASSET_NAME="agentuity_Linux_x86_64.tar.gz"
            curl -L "https://github.com/agentuity/cli/releases/download/${PREVIOUS_TAG}/${ASSET_NAME}" -o previous.tar.gz
            tar -xzf previous.tar.gz
            mv agentuity agentuity-previous
          fi
      
      # Test the upgrade command
      - name: Test upgrade command
        shell: bash
        run: |
          # Create a directory structure to simulate installation
          mkdir -p test-upgrade
          
          # Copy the "previous" version to the test directory
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            cp agentuity-previous.exe test-upgrade/agentuity.exe
          else
            cp agentuity-previous test-upgrade/agentuity
            chmod +x test-upgrade/agentuity
          fi
          
          # Build the current version with a modified version string to simulate a newer version
          VERSION=$(./agentuity-current version)
          MAJOR=$(echo $VERSION | cut -d. -f1)
          MINOR=$(echo $VERSION | cut -d. -f2)
          PATCH=$(echo $VERSION | cut -d. -f3)
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          
          # Create a mock release with the new version
          mkdir -p mock-release
          go build -ldflags "-X github.com/agentuity/cli/cmd.Version=$NEW_VERSION" -o mock-release/agentuity
          
          # Create checksums file
          cd mock-release
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            certutil -hashfile agentuity SHA256 | grep -v "hash of file" | grep -v "CertUtil" > checksums.txt
          else
            shasum -a 256 agentuity > checksums.txt
          fi
          cd ..
          
          # Test the upgrade command by mocking the GitHub API response
          # This is a simplified test - in a real scenario, you would need to mock the GitHub API
          # and set up a proper test environment
          
          echo "Testing upgrade command..."
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            ./test-upgrade/agentuity.exe version
            # On Windows, we would need a more complex setup to test the actual upgrade
            echo "Windows upgrade test completed (simplified)"
          else
            ./test-upgrade/agentuity version
            # On Unix systems, we can test more directly
            # In a real test, you would mock the GitHub API and test the actual upgrade
            echo "Unix upgrade test completed (simplified)"
          fi
          
          echo "Upgrade path test completed"
